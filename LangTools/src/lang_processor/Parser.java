
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 06 03:39:35 ALMT 2017
//----------------------------------------------------

package lang_processor;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 06 03:39:36 ALMT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\005\004" +
    "\000\002\005\002\000\002\006\006\000\002\006\012\000" +
    "\002\006\012\000\002\007\005\000\002\007\003\000\002" +
    "\010\005\000\002\010\003\000\002\013\005\000\002\013" +
    "\003\000\002\013\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\014\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\004\021\005\001\002\000\004\002\071\001" +
    "\002\000\006\022\ufffe\032\ufffe\001\002\000\006\022\011" +
    "\032\010\001\002\000\006\022\uffff\032\uffff\001\002\000" +
    "\004\030\066\001\002\000\012\023\ufffb\024\ufffb\026\ufffb" +
    "\032\ufffb\001\002\000\012\023\016\024\017\026\015\032" +
    "\013\001\002\000\004\004\063\001\002\000\014\015\ufffc" +
    "\023\ufffc\024\ufffc\026\ufffc\032\ufffc\001\002\000\004\006" +
    "\054\001\002\000\004\002\001\001\002\000\004\006\020" +
    "\001\002\000\010\006\023\031\021\032\024\001\002\000" +
    "\024\005\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\001\002\000\014\010\044\011" +
    "\045\016\050\017\051\020\047\001\002\000\010\006\023" +
    "\031\021\032\024\001\002\000\024\005\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\001\002\000\024\005\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\016\ufff4\017\ufff4\020\ufff4\001\002\000\024" +
    "\005\ufff6\007\ufff6\010\ufff6\011\ufff6\012\035\013\037\016" +
    "\ufff6\017\ufff6\020\ufff6\001\002\000\004\007\030\001\002" +
    "\000\004\025\031\001\002\000\004\014\032\001\002\000" +
    "\012\015\ufffb\024\ufffb\026\ufffb\032\ufffb\001\002\000\012" +
    "\015\034\024\017\026\015\032\013\001\002\000\014\015" +
    "\ufff9\023\ufff9\024\ufff9\026\ufff9\032\ufff9\001\002\000\010" +
    "\006\ufff0\031\ufff0\032\ufff0\001\002\000\010\006\023\031" +
    "\021\032\024\001\002\000\010\006\uffef\031\uffef\032\uffef" +
    "\001\002\000\024\005\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\016\ufff5\017\ufff5\020\ufff5\001\002\000\010" +
    "\007\043\010\044\011\045\001\002\000\010\006\023\031" +
    "\021\032\024\001\002\000\024\005\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\016\ufff3\017\ufff3\020\ufff3\001" +
    "\002\000\010\006\uffee\031\uffee\032\uffee\001\002\000\010" +
    "\006\uffed\031\uffed\032\uffed\001\002\000\024\005\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\035\013\037\016\ufff7\017\ufff7" +
    "\020\ufff7\001\002\000\010\006\uffe9\031\uffe9\032\uffe9\001" +
    "\002\000\010\006\uffeb\031\uffeb\032\uffeb\001\002\000\010" +
    "\006\uffea\031\uffea\032\uffea\001\002\000\010\006\023\031" +
    "\021\032\024\001\002\000\010\007\uffec\010\044\011\045" +
    "\001\002\000\010\006\023\031\021\032\024\001\002\000" +
    "\004\007\056\001\002\000\004\027\057\001\002\000\004" +
    "\014\060\001\002\000\012\015\ufffb\024\ufffb\026\ufffb\032" +
    "\ufffb\001\002\000\012\015\062\024\017\026\015\032\013" +
    "\001\002\000\014\015\ufff8\023\ufff8\024\ufff8\026\ufff8\032" +
    "\ufff8\001\002\000\010\006\023\031\021\032\024\001\002" +
    "\000\010\005\065\010\044\011\045\001\002\000\014\015" +
    "\ufffa\023\ufffa\024\ufffa\026\ufffa\032\ufffa\001\002\000\004" +
    "\031\067\001\002\000\004\005\070\001\002\000\006\022" +
    "\ufffd\032\ufffd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\004\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\011\001\001\000" +
    "\004\006\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\021\010\025\013\024\014\026\001\001\000\002" +
    "\001\001\000\006\012\041\015\051\001\001\000\010\007" +
    "\040\010\025\013\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\032\001\001" +
    "\000\004\006\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\041\001\001\000\006\010\045\013" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\052\010\025" +
    "\013\024\001\001\000\004\012\041\001\001\000\012\007" +
    "\021\010\025\013\024\014\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\060\001" +
    "\001\000\004\006\013\001\001\000\002\001\001\000\010" +
    "\007\063\010\025\013\024\001\001\000\004\012\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol tok) {
        String msg = "Syntax error at token " + tok.value 
        	+ " at line " + tok.left + ", column " + tok.right;
      	System.out.println(msg);
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // intcompbinop ::= EQUAL 
            {
              ASTNode RESULT =null;
		 RESULT = new ASTNode("intcompbinop", "EQUAL", "=="); 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intcompbinop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // intcompbinop ::= ARROW 
            {
              ASTNode RESULT =null;
		 RESULT = new ASTNode("intcompbinop", "ARROW", "<=");
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intcompbinop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // intcompbinop ::= SIGN 
            {
              ASTNode RESULT =null;
		 RESULT = new ASTNode("intcompbinop", "SIGN", "<"); 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intcompbinop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // intcompare ::= intexpr intcompbinop intexpr 
            {
              ASTNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode expr1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode cmp = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode expr2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ASTNode intcompare = new ASTNode("intcompare");
                           intcompare.addChild(expr1);
                           intcompare.addChild(cmp);
                           intcompare.addChild(expr2);                           
                           RESULT = intcompare;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intcompare",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // binops ::= MINUS 
            {
              ASTNode RESULT =null;
		
                        RESULT = new ASTNode("binops", "MINUS", "-");
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binops",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // binops ::= PLUS 
            {
              ASTNode RESULT =null;
		
                        RESULT = new ASTNode("binops", "PLUS", "+");
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binops",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // binopp ::= SLASH 
            {
              ASTNode RESULT =null;
		
                        RESULT = new ASTNode("binopp", "SLASH", "/");
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binopp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // binopp ::= STAR 
            {
              ASTNode RESULT =null;
		
                        RESULT = new ASTNode("binopp", "STAR", "*");
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binopp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // primary ::= INTEGER 
            {
              ASTNode RESULT =null;
		int integleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer integ = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTNode("primary", "INTEGER", "" + integ);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // primary ::= LABEL 
            {
              ASTNode RESULT =null;
		int lblleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lblright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lbl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ASTNode("primary", "LABEL", lbl);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // primary ::= LEFTBRACKET intexpr RIGHTBRACKET 
            {
              ASTNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode expr = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ASTNode intexpr = new ASTNode("intexpr");                       
                           RESULT = intexpr;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // product ::= primary 
            {
              ASTNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		                 
                           RESULT = p;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("product",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // product ::= product binopp primary 
            {
              ASTNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int primleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int primright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode prim = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ASTNode product = new ASTNode("product");
                           product.addChild(p);
                           product.addChild(b);
                           product.addChild(prim);                           
                           RESULT = product;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("product",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // intexpr ::= product 
            {
              ASTNode RESULT =null;
		 ASTNode intexpr = new ASTNode("intexpr");                       
                           RESULT = intexpr;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // intexpr ::= intexpr binops product 
            {
              ASTNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode expr1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode expr2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ASTNode intexpr = new ASTNode("intexpr");
                           intexpr.addChild(expr1);
                           intexpr.addChild(b);
                           intexpr.addChild(expr2);                           
                           RESULT = intexpr;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("intexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= WHILE LEFTBRACKET intcompare RIGHTBRACKET DO LCBRACKET statements RCBRACKET 
            {
              ASTNode RESULT =null;
		int cmp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cmp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode cmp2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmt3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmt3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode stmt3 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ASTNode stmt2 = new ASTNode("statement");
                            System.out.println("Parsed loop statement "); 
                            stmt2.addChild(cmp2);
                            stmt2.addChild(stmt3);
                            RESULT = stmt2;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IF LEFTBRACKET intcompare RIGHTBRACKET THEN LCBRACKET statements RCBRACKET 
            {
              ASTNode RESULT =null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode cmp = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmt4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmt4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode stmt4 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ASTNode stmt1 = new ASTNode("statement");
                            System.out.println("Parsed if-statement "); 
                            stmt1.addChild(cmp);
                            stmt1.addChild(stmt4);
                            RESULT = stmt1;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= LABEL ASMT_SYMBOL intexpr SEMICOLON 
            {
              ASTNode RESULT =null;
		int lblleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lblright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String lbl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode exp = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ASTNode stmt = new ASTNode("statement");
                            stmt.addChild(exp);
                           System.out.println("Parsed statement " + lbl + 
                            " to value " + exp);
                           RESULT = stmt;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= 
            {
              ASTNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statements statement 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode n = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode stmt = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ASTNode statements = new ASTNode("statements");
                           statements.addChild(stmt);
                           RESULT = statements;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // vardecl ::= LABEL TO INTEGER SEMICOLON 
            {
              ASTNode RESULT =null;
		int lblleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lblright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String lbl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int inteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int interight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer inte = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ASTNode vardecl = new ASTNode("vardecl");
                           //System.out.println("Parsed vardecl " + lbl + " with value " + inte);
                           RESULT = vardecl;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // vardecls ::= 
            {
              ASTNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // vardecls ::= vardecls vardecl 
            {
              ASTNode RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode vars = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode var = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ASTNode vardecls = new ASTNode("vardecls");
                           vardecls.addChild(var);
                           RESULT = vardecls;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= INITIALIZE vardecls BEGIN statements END 
            {
              ASTNode RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode vars = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode stmts = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ASTNode program = new ASTNode("program");
                           program.addChild(vars);
                           program.addChild(stmts);
                           RESULT = program;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

